[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "tfl training rl"
version = "0.1.0"
description = "A transferlab training"
authors = [
    "Michael Panchenko",
    "Ivan Rodriguez",
    "Anes Benmerzoug",
]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/aai-institute/tfl-training-rl"
classifiers = [
    "Programming Language :: Python :: 3.11",
]
exclude = ["test/*"]
packages = [
    {include = "training_rl", from = "src"}
]
include=["src/training_rl/assets"]

[tool.poetry.dependencies]
python = "^3.11"
gymnasium = {extras = ["mujoco"], version = "^0.29.1"}
numpy = "^1"
packaging = "*"
tensorboard = "^2.5.0"
# Torch 2.0.1 causes problems, see https://github.com/pytorch/pytorch/issues/100974
torch = "^2.0.0, !=2.0.1"
tqdm = "*"
notebook = "<7.0.0"
rise = "^5.7.1"
jupyter-contrib-nbextensions = "^0.7.0"
traitlets = "5.9.0"
matplotlib = "^3.8.0"
pandas = {extras = ["performance"], version = "^2.1.0"}
accsr = "^0.4.5"
control = "^0.9.4"
slycot = "^0.5.4"
ipywidgets = "^8.1.1"
mediapy = "^1.1.9"
matplotx = "^0.3.10"
seaborn = "^0.13.0"
do-mpc = "^4.6.1"


[tool.poetry.group.dev]
optional = true
[tool.poetry.group.dev.dependencies]
black = {extras = ["jupyter"], version = "^23.9.1"}
mypy = "^1.4.1"
poethepoet = "^0.20.0"
pre-commit = "^3.3.3"
pytest = "*"
pytest-cov = "*"
# Ray currently causes issues when installed on windows server 2022 in CI
# If users want to use ray, they should install it manually.
ray = {version = "^2", markers = "sys_platform != 'win32'"}
ruff = "^0.0.285"
sphinx = "<7"
sphinx_rtd_theme = "*"
sphinxcontrib-bibtex = "*"
sphinxcontrib-spelling = "^8.0.0"

[tool.mypy]
allow_redefinition = true
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
pretty = true
show_error_codes = true
show_error_context = true
show_traceback = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.doc8]
max-line-length = 1000

[tool.black]
line-length = 100
target-version = ["py311"]

[tool.ruff]
fix = true
src = ["src", "test"]
select = [
    "ASYNC", "B", "C4", "C90", "COM", "D", "DTZ", "E", "F", "FLY", "G", "I", "ISC", "PIE", "PLC", "PLE", "PLW", "RET", "RUF", "RSE", "SIM", "TID", "UP", "W", "YTT",
]
ignore = [
    "SIM118", # Needed b/c iter(batch) != iter(batch.keys()). See https://github.com/thu-ml/tianshou/issues/922
    "E501",   # line too long. black does a good enough job
    "E741",   # variable names like "l". this isn't a huge problem
    "B008",   # do not perform function calls in argument defaults. we do this sometimes
    "B011",   # assert false. we don't use python -O
    "B028",   # we don't need explicit stacklevel for warnings
    "D100", "D101", "D102", "D104", "D105", "D107", "D203", "D205", "D213", "D401", "D402",  # docstring stuff
    "DTZ005",  # we don't need that
    # remaining rules from https://github.com/psf/black/blob/main/.flake8 (except W503)
    # this is a simplified version of config, making vscode plugin happy
    "E402", "E501", "E701", "E731", "C408", "E203"
]
unfixable = [
    "F841",  # unused variable. ruff keeps the call, but mostly we want to get rid of it all
    "F601",  # automatic fix might obscure issue
    "F602",  # automatic fix might obscure issue
    "B018",  # automatic fix might obscure issue
]
extend-fixable = [
    "F401",  # unused import
    "B905" , # bugbear
]

target-version = "py311"

[tool.ruff.mccabe]
max-complexity = 20

[tool.ruff.per-file-ignores]
"test/**" = ["D103"]
"docs/**" = ["D103"]
"examples/**" = ["D103"]

[tool.poetry-sort]
move-optionals-to-bottom = true

# keep relevant parts in sync with pre-commit
[tool.poe.tasks]  # https://github.com/nat-n/poethepoet
test = "pytest test --cov=training_rl --cov-report=xml --cov-report=term-missing --durations=0 -v --color=yes"
_black_check = "black --check ."
_ruff_check = "ruff check ."
_black_format = "black ."
_ruff_format = "ruff --fix ."
lint = ["_black_check", "_ruff_check"]
_poetry_install_sort_plugin = "poetry self add poetry-plugin-sort"
_poery_sort = "poetry sort"
format = ["_black_format", "_ruff_format", "_poetry_install_sort_plugin", "_poery_sort"]
_spellcheck = "sphinx-build -W -b spelling docs docs/_build"
_doc_build = "sphinx-build -W -b html docs docs/_build"
doc-clean = "rm -rf docs/_build"
doc-build = ["_spellcheck", "_doc_build"]
type-check = "mypy src"
